overlay: 1.0.0
info:
  title: CodeSamples overlay for python target
  version: 0.0.0
actions:
  - target: $["paths"]["/configurations"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getConfigurations
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.configurations.get_configurations(project="<value>")

            if res.configurations is not None:
                # handle response
                pass
  - target: $["paths"]["/configurations"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createConfiguration
          source: |-
            from honeyhive import HoneyHive
            from honeyhive.models import components

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.configurations.create_configuration(request={
                "project": "660d7ba7995cacccce4d299e",
                "name": "function-v0",
                "provider": "openai",
                "parameters": components.PostConfigurationRequestParameters(
                    call_type=components.PostConfigurationRequestCallType.CHAT,
                    model="gpt-4-turbo-preview",
                    hyperparameters={
                        "temperature": 0,
                        "max_tokens": 1000,
                        "top_p": 1,
                        "top_k": -1,
                        "frequency_penalty": 0,
                        "presence_penalty": 0,
                        "stop_sequences": [
                            "<value>",
                        ],
                    },
                    selected_functions=[
                        {
                            "id": "64e3ba90e81f9b3a3808c27f",
                            "name": "get_google_information",
                            "description": "Get information from Google when you do not have that information in your context",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "query": {
                                        "type": "string",
                                        "description": "The query asked by the user",
                                    },
                                },
                                "required": [
                                    "query",
                                ],
                            },
                        },
                    ],
                    function_call_params=components.PostConfigurationRequestFunctionCallParams.AUTO,
                    force_function={

                    },
                    **{
                        "template": [
                            {
                                "role": "system",
                                "content": "You are a web search assistant.",
                            },
                            {
                                "role": "user",
                                "content": "{{ query }}",
                            },
                        ],
                    },
                ),
                "env": [
                    components.PostConfigurationRequestEnv.STAGING,
                ],
                "user_properties": {
                    "user_id": "google-oauth2|108897808434934946583",
                    "user_name": "Dhruv Singh",
                    "user_picture": "https://lh3.googleusercontent.com/a/ACg8ocLyQilNtK9RIv4M0p-0FBSbxljBP0p5JabnStku1AQKtFSK=s96-c",
                    "user_email": "dhruv@honeyhive.ai",
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/configurations/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteConfiguration
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.configurations.delete_configuration(id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/configurations/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateConfiguration
          source: |-
            from honeyhive import HoneyHive
            from honeyhive.models import components

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.configurations.update_configuration(id="<id>", put_configuration_request={
                "project": "New Project",
                "name": "function-v0",
                "provider": "openai",
                "parameters": components.PutConfigurationRequestParameters(
                    call_type=components.PutConfigurationRequestCallType.CHAT,
                    model="gpt-4-turbo-preview",
                    hyperparameters={
                        "temperature": 0,
                        "max_tokens": 1000,
                        "top_p": 1,
                        "top_k": -1,
                        "frequency_penalty": 0,
                        "presence_penalty": 0,
                        "stop_sequences": [
                            "<value>",
                        ],
                    },
                    selected_functions=[
                        {
                            "id": "64e3ba90e81f9b3a3808c27f",
                            "name": "get_google_information",
                            "description": "Get information from Google when you do not have that information in your context",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "query": {
                                        "type": "string",
                                        "description": "The query asked by the user",
                                    },
                                },
                                "required": [
                                    "query",
                                ],
                            },
                        },
                    ],
                    function_call_params=components.PutConfigurationRequestFunctionCallParams.AUTO,
                    force_function={

                    },
                    **{
                        "template": [
                            {
                                "role": "system",
                                "content": "You are a web search assistant.",
                            },
                            {
                                "role": "user",
                                "content": "{{ query }}",
                            },
                        ],
                    },
                ),
                "env": [
                    components.PutConfigurationRequestEnv.STAGING,
                ],
                "type": components.PutConfigurationRequestType.LLM,
                "user_properties": {
                    "user_id": "google-oauth2|108897808434934946583",
                    "user_name": "Dhruv Singh",
                    "user_picture": "https://lh3.googleusercontent.com/a/ACg8ocLyQilNtK9RIv4M0p-0FBSbxljBP0p5JabnStku1AQKtFSK=s96-c",
                    "user_email": "dhruv@honeyhive.ai",
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/datapoints"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getDatapoints
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datapoints.get_datapoints(project="<value>")

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/datapoints"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createDatapoint
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datapoints.create_datapoint(request={
                "project": "New Project",
                "inputs": {
                    "query": "what's the temperature in Iceland?",
                },
                "history": [
                    {
                        "role": "system",
                        "content": "You are a helpful web assistant that helps users answer questions about the world based on the information provided to you by Google's search API. Answer the questions as truthfully as you can. In case you are unsure about the correct answer, please respond with \"I apologize but I'm not sure.\"",
                    },
                    {
                        "role": "user",
                        "content": "what's the temperature in Iceland?\n\n\n--Google search API results below:---\n\n\"snippet\":\"2 Week Extended Forecast in Reykjavik, Iceland ; Feb 4, 29 / 20 °F · Snow showers early. Broken clouds. ; Feb 5, 27 / 16 °F · Light snow. Decreasing cloudiness.\",\"snippet_highlighted_words\":[\"Feb 4, 29 / 20 °F\"]",
                    },
                ],
                "ground_truth": {
                    "role": "assistant",
                    "content": "The temperature in Reykjavik, Iceland is currently around 5F or -15C. Please note that weather conditions can change rapidly, so it's best to check a reliable source for the most up-to-date information.",
                },
                "linked_event": "6bba5182-d4b1-4b29-a64a-f0a8bd964f76",
                "linked_datasets": [
                    "<value>",
                ],
                "metadata": {
                    "question_type": "weather",
                    "completion_tokens": 47,
                    "prompt_tokens": 696,
                    "total_tokens": 743,
                },
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/datapoints/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteDatapoint
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datapoints.delete_datapoint(id="<id>")

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/datapoints/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getDatapoint
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datapoints.get_datapoint(id="<id>")

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/datapoints/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateDatapoint
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datapoints.update_datapoint(id="<id>", update_datapoint_request={
                "inputs": {
                    "query": "what's the temperature in Reykjavik?",
                },
                "history": [
                    {
                        "role": "system",
                        "content": "You are a helpful web assistant that helps users answer questions about the world based on the information provided to you by Google's search API. Answer the questions as truthfully as you can. In case you are unsure about the correct answer, please respond with \"I apologize but I'm not sure.\"",
                    },
                    {
                        "role": "user",
                        "content": "what's the temperature in Reykjavik?\n\n\n--Google search API results below:---\n\n\"snippet\":\"2 Week Extended Forecast in Reykjavik, Iceland ; Feb 4, 29 / 20 °F · Snow showers early. Broken clouds. ; Feb 5, 27 / 16 °F · Light snow. Decreasing cloudiness.\",\"snippet_highlighted_words\":[\"Feb 4, 29 / 20 °F\"]",
                    },
                ],
                "ground_truth": {
                    "role": "assistant",
                    "content": "The temperature in Reykjavik, Iceland is currently around 5F or -15C. Please note that weather conditions can change rapidly, so it's best to check a reliable source for the most up-to-date information.",
                },
                "linked_evals": [
                    "<value>",
                ],
                "linked_datasets": [
                    "<value>",
                ],
                "metadata": {
                    "question_type": "capital-weather",
                    "random_field": 0,
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/datasets"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteDataset
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datasets.delete_dataset(dataset_id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/datasets"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getDatasets
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datasets.get_datasets(project="<value>")

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/datasets"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createDataset
          source: |-
            from honeyhive import HoneyHive
            from honeyhive.models import components

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datasets.create_dataset(request={
                "project": "New Project",
                "name": "test-dataset",
                "description": "A test dataset",
                "type": components.CreateDatasetRequestType.EVALUATION,
                "datapoints": [
                    "66369748b5773befbdc661e2",
                ],
                "linked_evals": [
                    "<value>",
                ],
                "saved": False,
                "pipeline_type": components.CreateDatasetRequestPipelineType.EVENT,
                "metadata": {
                    "source": "dev",
                },
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/datasets"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateDataset
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datasets.update_dataset(request={
                "dataset_id": "663876ec4611c47f4970f0c3",
                "name": "new-dataset-name",
                "description": "An updated dataset description",
                "datapoints": [
                    "66369748b5773befbdc661e",
                ],
                "linked_evals": [
                    "66369748b5773befbdasdk1",
                ],
                "metadata": {
                    "updated": True,
                    "source": "prod",
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/datasets/{dataset_id}/datapoints"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: addDatapoints
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.datasets.add_datapoints(dataset_id="<id>", request_body={
                "project": "<value>",
                "data": [
                    {
                        "key": "<value>",
                        "key1": "<value>",
                        "key2": "<value>",
                    },
                ],
                "mapping": {
                    "inputs": [
                        "<value>",
                    ],
                    "ground_truth": [
                        "<value>",
                        "<value>",
                    ],
                    "history": [
                        "<value>",
                    ],
                },
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/events"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createEvent
          source: |-
            from honeyhive import HoneyHive
            from honeyhive.models import components

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.events.create_event(request={
                "event": {
                    "project": "Simple RAG",
                    "source": "playground",
                    "event_name": "Model Completion",
                    "event_type": components.CreateEventRequestEventType.MODEL,
                    "event_id": "7f22137a-6911-4ed3-bc36-110f1dde6b66",
                    "session_id": "caf77ace-3417-4da4-944d-f4a0688f3c23",
                    "parent_id": "caf77ace-3417-4da4-944d-f4a0688f3c23",
                    "children_ids": [
                        "<value>",
                    ],
                    "config": {
                        "model": "gpt-3.5-turbo",
                        "version": "v0.1",
                        "provider": "openai",
                        "hyperparameters": {
                            "temperature": 0,
                            "top_p": 1,
                            "max_tokens": 1000,
                            "presence_penalty": 0,
                            "frequency_penalty": 0,
                            "stop": [
                                "<value>",
                            ],
                            "n": 1,
                        },
                        "template": [
                            {
                                "role": "system",
                                "content": "Answer the user's question only using provided context.\n" +
                                "\n" +
                                "Context: {{ context }}",
                            },
                            {
                                "role": "user",
                                "content": "{{question}}",
                            },
                        ],
                        "type": "chat",
                    },
                    "inputs": {
                        "context": "Hello world",
                        "question": "What is in the context?",
                        "chat_history": [
                            {
                                "role": "system",
                                "content": "Answer the user's question only using provided context.\n" +
                                "\n" +
                                "Context: Hello world",
                            },
                            {
                                "role": "user",
                                "content": "What is in the context?",
                            },
                        ],
                    },
                    "outputs": {
                        "role": "assistant",
                        "content": "Hello world",
                    },
                    "error": "<value>",
                    "start_time": 1714978764301,
                    "end_time": 1714978765301,
                    "duration": 999.8056,
                    "metadata": {
                        "cost": 0.00008,
                        "completion_tokens": 23,
                        "prompt_tokens": 35,
                        "total_tokens": 58,
                    },
                    "feedback": {

                    },
                    "metrics": {
                        "Answer Faithfulness": 5,
                        "Answer Faithfulness_explanation": "The AI assistant's answer is a concise and accurate description of Ramp's API. It provides a clear explanation of what the API does and how developers can use it to integrate Ramp's financial services into their own applications. The answer is faithful to the provided context.",
                        "Number of words": 18,
                    },
                    "user_properties": {
                        "user": "google-oauth2|111840237613341303366",
                    },
                },
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/events"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateEvent
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.events.update_event(request={
                "event_id": "7f22137a-6911-4ed3-bc36-110f1dde6b66",
                "metadata": {
                    "cost": 0.00008,
                    "completion_tokens": 23,
                    "prompt_tokens": 35,
                    "total_tokens": 58,
                },
                "feedback": {
                    "rating": 5,
                },
                "metrics": {
                    "num_words": 2,
                },
                "outputs": {
                    "role": "assistant",
                    "content": "Hello world",
                },
                "config": {
                    "template": [
                        {
                            "role": "system",
                            "content": "Hello, {{ name }}!",
                        },
                    ],
                },
                "user_properties": {
                    "user_id": "691b1f94-d38c-4e92-b051-5e03fee9ff86",
                },
                "duration": 42,
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/events/batch"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createEventBatch
          source: |-
            from honeyhive import HoneyHive
            from honeyhive.models import components

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.events.create_event_batch(request={
                "events": [
                    {
                        "project": "Simple RAG",
                        "source": "playground",
                        "event_name": "Model Completion",
                        "event_type": components.CreateEventRequestEventType.MODEL,
                        "event_id": "7f22137a-6911-4ed3-bc36-110f1dde6b66",
                        "session_id": "caf77ace-3417-4da4-944d-f4a0688f3c23",
                        "parent_id": "caf77ace-3417-4da4-944d-f4a0688f3c23",
                        "children_ids": [
                            "<value>",
                        ],
                        "config": {
                            "model": "gpt-3.5-turbo",
                            "version": "v0.1",
                            "provider": "openai",
                            "hyperparameters": {
                                "temperature": 0,
                                "top_p": 1,
                                "max_tokens": 1000,
                                "presence_penalty": 0,
                                "frequency_penalty": 0,
                                "stop": [
                                    "<value>",
                                ],
                                "n": 1,
                            },
                            "template": [
                                {
                                    "role": "system",
                                    "content": "Answer the user's question only using provided context.\n" +
                                    "\n" +
                                    "Context: {{ context }}",
                                },
                                {
                                    "role": "user",
                                    "content": "{{question}}",
                                },
                            ],
                            "type": "chat",
                        },
                        "inputs": {
                            "context": "Hello world",
                            "question": "What is in the context?",
                            "chat_history": [
                                {
                                    "role": "system",
                                    "content": "Answer the user's question only using provided context.\n" +
                                    "\n" +
                                    "Context: Hello world",
                                },
                                {
                                    "role": "user",
                                    "content": "What is in the context?",
                                },
                            ],
                        },
                        "outputs": {
                            "role": "assistant",
                            "content": "Hello world",
                        },
                        "error": "<value>",
                        "start_time": 1714978764301,
                        "end_time": 1714978765301,
                        "duration": 999.8056,
                        "metadata": {
                            "cost": 0.00008,
                            "completion_tokens": 23,
                            "prompt_tokens": 35,
                            "total_tokens": 58,
                        },
                        "feedback": {

                        },
                        "metrics": {
                            "Answer Faithfulness": 5,
                            "Answer Faithfulness_explanation": "The AI assistant's answer is a concise and accurate description of Ramp's API. It provides a clear explanation of what the API does and how developers can use it to integrate Ramp's financial services into their own applications. The answer is faithful to the provided context.",
                            "Number of words": 18,
                        },
                        "user_properties": {
                            "user": "google-oauth2|111840237613341303366",
                        },
                    },
                ],
                "session_properties": {
                    "session_name": "Playground Session",
                    "source": "playground",
                    "session_id": "caf77ace-3417-4da4-944d-f4a0688f3c23",
                    "inputs": {
                        "context": "Hello world",
                        "question": "What is in the context?",
                        "chat_history": [
                            {
                                "role": "system",
                                "content": "Answer the user's question only using provided context.\n" +
                                "\n" +
                                "Context: Hello world",
                            },
                            {
                                "role": "user",
                                "content": "What is in the context?",
                            },
                        ],
                    },
                    "outputs": {
                        "role": "assistant",
                        "content": "Hello world",
                    },
                    "error": "<value>",
                    "user_properties": {
                        "user": "google-oauth2|111840237613341303366",
                    },
                    "metrics": {

                    },
                    "feedback": {

                    },
                    "metadata": {

                    },
                },
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/events/export"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: getEvents
          source: |-
            from honeyhive import HoneyHive
            from honeyhive.models import components

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.events.get_events(request={
                "project": "<value>",
                "filters": [
                    {
                        "field": "event_type",
                        "value": "model",
                        "operator": components.Operator.IS,
                        "type": components.Type.STRING,
                    },
                ],
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/events/model"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createModelEvent
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.events.create_model_event(request={
                "model_event": {
                    "project": "New Project",
                    "model": "gpt-4o",
                    "provider": "openai",
                    "messages": [
                        {
                            "role": "system",
                            "content": "Hello, world!",
                        },
                    ],
                    "response": {
                        "role": "assistant",
                        "content": "Hello, world!",
                    },
                    "duration": 42,
                    "usage": {
                        "prompt_tokens": 10,
                        "completion_tokens": 10,
                        "total_tokens": 20,
                    },
                    "cost": 0.00008,
                    "error": "<value>",
                    "source": "playground",
                    "event_name": "Model Completion",
                    "hyperparameters": {
                        "temperature": 0,
                        "top_p": 1,
                        "max_tokens": 1000,
                        "presence_penalty": 0,
                        "frequency_penalty": 0,
                        "stop": [
                            "<value>",
                        ],
                        "n": 1,
                    },
                    "template": [
                        {
                            "role": "system",
                            "content": "Hello, {{ name }}!",
                        },
                    ],
                    "template_inputs": {
                        "name": "world",
                    },
                    "tools": [
                        {
                            "type": "function",
                            "function": {
                                "name": "get_current_weather",
                                "description": "Get the current weather",
                                "parameters": {
                                    "type": "object",
                                    "properties": {
                                        "location": {
                                            "type": "string",
                                            "description": "The city and state, e.g. San Francisco, CA",
                                        },
                                        "format": {
                                            "type": "string",
                                            "enum": [
                                                "celsius",
                                                "fahrenheit",
                                            ],
                                            "description": "The temperature unit to use. Infer this from the users location.",
                                        },
                                    },
                                    "required": [
                                        "location",
                                        "format",
                                    ],
                                },
                            },
                        },
                    ],
                    "tool_choice": "none",
                    "response_format": {
                        "type": "text",
                    },
                },
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/events/model/batch"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createModelEventBatch
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.events.create_model_event_batch(request={
                "model_events": [
                    {
                        "project": "New Project",
                        "model": "gpt-4o",
                        "provider": "openai",
                        "messages": [
                            {
                                "role": "system",
                                "content": "Hello, world!",
                            },
                        ],
                        "response": {
                            "role": "assistant",
                            "content": "Hello, world!",
                        },
                        "duration": 42,
                        "usage": {
                            "prompt_tokens": 10,
                            "completion_tokens": 10,
                            "total_tokens": 20,
                        },
                        "cost": 0.00008,
                        "error": "<value>",
                        "source": "playground",
                        "event_name": "Model Completion",
                        "hyperparameters": {
                            "temperature": 0,
                            "top_p": 1,
                            "max_tokens": 1000,
                            "presence_penalty": 0,
                            "frequency_penalty": 0,
                            "stop": [
                                "<value>",
                            ],
                            "n": 1,
                        },
                        "template": [
                            {
                                "role": "system",
                                "content": "Hello, {{ name }}!",
                            },
                        ],
                        "template_inputs": {
                            "name": "world",
                        },
                        "tools": [
                            {
                                "type": "function",
                                "function": {
                                    "name": "get_current_weather",
                                    "description": "Get the current weather",
                                    "parameters": {
                                        "type": "object",
                                        "properties": {
                                            "location": {
                                                "type": "string",
                                                "description": "The city and state, e.g. San Francisco, CA",
                                            },
                                            "format": {
                                                "type": "string",
                                                "enum": [
                                                    "celsius",
                                                    "fahrenheit",
                                                ],
                                                "description": "The temperature unit to use. Infer this from the users location.",
                                            },
                                        },
                                        "required": [
                                            "location",
                                            "format",
                                        ],
                                    },
                                },
                            },
                        ],
                        "tool_choice": "none",
                        "response_format": {
                            "type": "text",
                        },
                    },
                ],
                "session_properties": {
                    "session_name": "Playground Session",
                    "source": "playground",
                    "session_id": "caf77ace-3417-4da4-944d-f4a0688f3c23",
                    "inputs": {
                        "context": "Hello world",
                        "question": "What is in the context?",
                        "chat_history": [
                            {
                                "role": "system",
                                "content": "Answer the user's question only using provided context.\n" +
                                "\n" +
                                "Context: Hello world",
                            },
                            {
                                "role": "user",
                                "content": "What is in the context?",
                            },
                        ],
                    },
                    "outputs": {
                        "role": "assistant",
                        "content": "Hello world",
                    },
                    "error": "<value>",
                    "user_properties": {
                        "user": "google-oauth2|111840237613341303366",
                    },
                    "metrics": {

                    },
                    "feedback": {

                    },
                    "metadata": {

                    },
                },
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/metrics"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteMetric
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.delete_metric(metric_id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/metrics"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getMetrics
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.get_metrics(project_name="<value>")

            if res.metrics is not None:
                # handle response
                pass
  - target: $["paths"]["/metrics"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMetric
          source: |-
            from honeyhive import HoneyHive
            from honeyhive.models import components

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.create_metric(request={
                "name": "<value>",
                "task": "<value>",
                "type": components.MetricType.MODEL,
                "description": "ack oh faithfully annually bloom ha because instead",
                "return_type": components.ReturnType.BOOLEAN,
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/metrics"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateMetric
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.update_metric(request={
                "metric_id": "<id>",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/projects"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteProject
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.projects.delete_project(name="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/projects"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getProjects
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.projects.get_projects()

            if res.projects is not None:
                # handle response
                pass
  - target: $["paths"]["/projects"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createProject
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.projects.create_project(request={
                "name": "<value>",
            })

            if res.project is not None:
                # handle response
                pass
  - target: $["paths"]["/projects"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateProject
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.projects.update_project(request={
                "project_id": "<id>",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/runs"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRuns
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.experiments.get_runs()

            if res.get_runs_response is not None:
                # handle response
                pass
  - target: $["paths"]["/runs"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createRun
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.experiments.create_run(request={
                "project": "<value>",
                "name": "<value>",
                "event_ids": [
                    "1504f40b-8865-40f9-b343-513d7da481bd",
                ],
            })

            if res.create_run_response is not None:
                # handle response
                pass
  - target: $["paths"]["/runs/{run_id_1}/compare-with/{run_id_2}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getExperimentComparison
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.experiments.get_experiment_comparison(run_id_1="<value>", run_id_2="<value>", project_id="<id>")

            if res.experiment_comparison_response is not None:
                # handle response
                pass
  - target: $["paths"]["/runs/{run_id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteRun
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.experiments.delete_run(run_id="<id>")

            if res.delete_run_response is not None:
                # handle response
                pass
  - target: $["paths"]["/runs/{run_id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRun
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.experiments.get_run(run_id="<id>")

            if res.get_run_response is not None:
                # handle response
                pass
  - target: $["paths"]["/runs/{run_id}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateRun
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.experiments.update_run(run_id="<id>", update_run_request={})

            if res.update_run_response is not None:
                # handle response
                pass
  - target: $["paths"]["/runs/{run_id}/result"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getExperimentResult
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.experiments.get_experiment_result(run_id="<id>", project_id="<id>")

            if res.experiment_result_response is not None:
                # handle response
                pass
  - target: $["paths"]["/session/start"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: startSession
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.session.start_session(request={
                "session": {
                    "project": "Simple RAG Project",
                    "session_name": "Playground Session",
                    "source": "playground",
                    "session_id": "caf77ace-3417-4da4-944d-f4a0688f3c23",
                    "children_ids": [
                        "7f22137a-6911-4ed3-bc36-110f1dde6b66",
                    ],
                    "inputs": {
                        "context": "Hello world",
                        "question": "What is in the context?",
                        "chat_history": [
                            {
                                "role": "system",
                                "content": "Answer the user's question only using provided context.\n" +
                                "\n" +
                                "Context: Hello world",
                            },
                            {
                                "role": "user",
                                "content": "What is in the context?",
                            },
                        ],
                    },
                    "outputs": {
                        "role": "assistant",
                        "content": "Hello world",
                    },
                    "error": "<value>",
                    "duration": 824.8056,
                    "user_properties": {
                        "user": "google-oauth2|111840237613341303366",
                    },
                    "metrics": {

                    },
                    "feedback": {

                    },
                    "metadata": {

                    },
                    "start_time": 1712025501605,
                    "end_time": 1712025499832,
                },
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/session/{session_id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSession
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.session.get_session(session_id="<id>")

            if res.event is not None:
                # handle response
                pass
  - target: $["paths"]["/tools"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteTool
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.tools.delete_tool(function_id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/tools"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getTools
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.tools.get_tools()

            if res.tools is not None:
                # handle response
                pass
  - target: $["paths"]["/tools"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createTool
          source: |-
            from honeyhive import HoneyHive
            from honeyhive.models import components

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.tools.create_tool(request={
                "task": "<value>",
                "name": "<value>",
                "parameters": {
                    "key": "<value>",
                    "key1": "<value>",
                },
                "type": components.CreateToolRequestType.FUNCTION,
            })

            if res.object is not None:
                # handle response
                pass
  - target: $["paths"]["/tools"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateTool
          source: |-
            from honeyhive import HoneyHive

            s = HoneyHive(
                bearer_auth="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.tools.update_tool(request={
                "id": "<id>",
                "name": "<value>",
                "parameters": {

                },
            })

            if res is not None:
                # handle response
                pass
