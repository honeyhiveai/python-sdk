name: AWS Lambda Compatibility Tests

on:
  push:
    branches: [ main, develop, complete-refactor ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run Lambda tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  lambda-docker-tests:
    name: Lambda Docker Simulation Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install docker requests pytest pytest-asyncio
        pip install -e .
        
    - name: Start Docker daemon
      run: |
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        
    - name: Test Lambda compatibility with Docker
      run: |
        cd tests/lambda
        python -m pytest test_lambda_compatibility.py::TestLambdaCompatibility -v --tb=short
      timeout-minutes: 10
      
    - name: Test Cold Start Performance
      run: |
        cd tests/lambda
        python -m pytest test_lambda_compatibility.py::TestLambdaColdStarts -v --tb=short
      timeout-minutes: 15
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: lambda-test-results-py${{ matrix.python-version }}
        path: tests/lambda/test-results/
        
  lambda-real-aws-tests:
    name: Real AWS Lambda Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install SAM CLI
      run: |
        pip install aws-sam-cli
        
    - name: Deploy test Lambda functions
      run: |
        cd tests/lambda/aws-deployment
        sam build
        sam deploy --no-confirm-changeset --no-fail-on-empty-changeset
        
    - name: Run real Lambda tests
      run: |
        cd tests/lambda
        python -m pytest test_real_lambda.py -v --tb=short
      env:
        AWS_LAMBDA_FUNCTION_NAME: honeyhive-sdk-test
        HH_API_KEY: ${{ secrets.HH_API_KEY }}
        HH_PROJECT: lambda-ci-test
        
    - name: Cleanup Lambda functions
      if: always()
      run: |
        cd tests/lambda/aws-deployment
        sam delete --no-prompts
        
  lambda-performance-benchmark:
    name: Lambda Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install docker requests pytest pytest-benchmark
        pip install -e .
        
    - name: Run performance benchmarks
      run: |
        cd tests/lambda
        python -m pytest test_lambda_performance.py --benchmark-json=benchmark-results.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: lambda-benchmarks
        path: tests/lambda/benchmark-results.json
        
    - name: Comment benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('tests/lambda/benchmark-results.json'));
          
          const comment = `## 🚀 Lambda Performance Benchmarks
          
          | Metric | Value |
          |--------|-------|
          | Cold Start Time | ${results.cold_start_avg}ms |
          | Warm Start Time | ${results.warm_start_avg}ms |
          | SDK Init Time | ${results.sdk_init_avg}ms |
          | Memory Usage | ${results.memory_peak}MB |
          | Flush Time | ${results.flush_avg}ms |
          
          ${results.cold_start_avg < 1000 ? '✅' : '⚠️'} Cold start performance
          ${results.sdk_init_avg < 100 ? '✅' : '⚠️'} SDK initialization speed
          ${results.memory_peak < 50 ? '✅' : '⚠️'} Memory efficiency
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
  lambda-compatibility-matrix:
    name: Lambda Compatibility Matrix
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        lambda-runtime: [
          "python3.11",
          "python3.12"
        ]
        memory-size: [128, 256, 512, 1024]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test compatibility
      run: |
        cd tests/lambda
        docker run --rm \
          -v $(pwd)/lambda_functions:/var/task \
          -v $(pwd)/../../src:/var/task/honeyhive \
          -e AWS_LAMBDA_FUNCTION_MEMORY_SIZE=${{ matrix.memory-size }} \
          -e HH_API_KEY=test-key \
          -p 9000:8080 \
          public.ecr.aws/lambda/${{ matrix.lambda-runtime }} \
          basic_tracing.lambda_handler &
        
        sleep 5
        
        # Test basic functionality
        response=$(curl -s -X POST http://localhost:9000/2015-03-31/functions/function/invocations \
          -H "Content-Type: application/json" \
          -d '{"test": "compatibility", "runtime": "${{ matrix.lambda-runtime }}", "memory": ${{ matrix.memory-size }}}')
        
        echo "Response: $response"
        
        # Check if successful
        if echo "$response" | grep -q '"statusCode": 200'; then
          echo "✅ Compatible with ${{ matrix.lambda-runtime }} @ ${{ matrix.memory-size }}MB"
        else
          echo "❌ Failed with ${{ matrix.lambda-runtime }} @ ${{ matrix.memory-size }}MB"
          exit 1
        fi
